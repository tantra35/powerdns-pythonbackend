#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style
#

from thrift.Thrift import TType, TMessageType, TException
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


#------------------------------------------------------------------------------
#
#
#
#------------------------------------------------------------------------------
class Iface(object):
  def add_domain(self, dname, ttl):
    """
    Parameters:
     - dname
     - ttl
    """
    pass

  def rmv_domain(self, dname):
    """
    Parameters:
     - dname
    """
    pass

  def add_domain_backet(self, dname, bdname, longitude, latitude, isdefault):
    """
    Parameters:
     - dname
     - bdname
     - longitude
     - latitude
     - isdefault
    """
    pass

  def rmv_domain_backet(self, dname, bdname):
    """
    Parameters:
     - dname
     - bdname
    """
    pass

  def add_domain_backet_ip(self, dname, bdname, ip):
    """
    Parameters:
     - dname
     - bdname
     - ip
    """
    pass

  def rmv_domain_backet_ip(self, dname, bdname, ip):
    """
    Parameters:
     - dname
     - bdname
     - ip
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def add_domain(self, dname, ttl):
    """
    Parameters:
     - dname
     - ttl
    """
    self.send_add_domain(dname, ttl)
    return self.recv_add_domain()

  def send_add_domain(self, dname, ttl):
    self._oprot.writeMessageBegin('add_domain', TMessageType.CALL, self._seqid)
    args = add_domain_args()
    args.dname = dname
    args.ttl = ttl
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_domain(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_domain_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "add_domain failed: unknown result");

  def rmv_domain(self, dname):
    """
    Parameters:
     - dname
    """
    self.send_rmv_domain(dname)
    return self.recv_rmv_domain()

  def send_rmv_domain(self, dname):
    self._oprot.writeMessageBegin('rmv_domain', TMessageType.CALL, self._seqid)
    args = rmv_domain_args()
    args.dname = dname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_rmv_domain(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = rmv_domain_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "rmv_domain failed: unknown result");

  def add_domain_backet(self, dname, bdname, longitude, latitude, isdefault):
    """
    Parameters:
     - dname
     - bdname
     - longitude
     - latitude
     - isdefault
    """
    self.send_add_domain_backet(dname, bdname, longitude, latitude, isdefault)
    return self.recv_add_domain_backet()

  def send_add_domain_backet(self, dname, bdname, longitude, latitude, isdefault):
    self._oprot.writeMessageBegin('add_domain_backet', TMessageType.CALL, self._seqid)
    args = add_domain_backet_args()
    args.dname = dname
    args.bdname = bdname
    args.longitude = longitude
    args.latitude = latitude
    args.isdefault = isdefault
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_domain_backet(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_domain_backet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "add_domain_backet failed: unknown result");

  def rmv_domain_backet(self, dname, bdname):
    """
    Parameters:
     - dname
     - bdname
    """
    self.send_rmv_domain_backet(dname, bdname)
    return self.recv_rmv_domain_backet()

  def send_rmv_domain_backet(self, dname, bdname):
    self._oprot.writeMessageBegin('rmv_domain_backet', TMessageType.CALL, self._seqid)
    args = rmv_domain_backet_args()
    args.dname = dname
    args.bdname = bdname
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_rmv_domain_backet(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = rmv_domain_backet_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "rmv_domain_backet failed: unknown result");

  def add_domain_backet_ip(self, dname, bdname, ip):
    """
    Parameters:
     - dname
     - bdname
     - ip
    """
    self.send_add_domain_backet_ip(dname, bdname, ip)
    return self.recv_add_domain_backet_ip()

  def send_add_domain_backet_ip(self, dname, bdname, ip):
    self._oprot.writeMessageBegin('add_domain_backet_ip', TMessageType.CALL, self._seqid)
    args = add_domain_backet_ip_args()
    args.dname = dname
    args.bdname = bdname
    args.ip = ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_add_domain_backet_ip(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = add_domain_backet_ip_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "add_domain_backet_ip failed: unknown result");

  def rmv_domain_backet_ip(self, dname, bdname, ip):
    """
    Parameters:
     - dname
     - bdname
     - ip
    """
    self.send_rmv_domain_backet_ip(dname, bdname, ip)
    return self.recv_rmv_domain_backet_ip()

  def send_rmv_domain_backet_ip(self, dname, bdname, ip):
    self._oprot.writeMessageBegin('rmv_domain_backet_ip', TMessageType.CALL, self._seqid)
    args = rmv_domain_backet_ip_args()
    args.dname = dname
    args.bdname = bdname
    args.ip = ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_rmv_domain_backet_ip(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = rmv_domain_backet_ip_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "rmv_domain_backet_ip failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["add_domain"] = Processor.process_add_domain
    self._processMap["rmv_domain"] = Processor.process_rmv_domain
    self._processMap["add_domain_backet"] = Processor.process_add_domain_backet
    self._processMap["rmv_domain_backet"] = Processor.process_rmv_domain_backet
    self._processMap["add_domain_backet_ip"] = Processor.process_add_domain_backet_ip
    self._processMap["rmv_domain_backet_ip"] = Processor.process_rmv_domain_backet_ip

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_add_domain(self, seqid, iprot, oprot):
    args = add_domain_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_domain_result()
    result.success = self._handler.add_domain(args.dname, args.ttl)
    oprot.writeMessageBegin("add_domain", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_rmv_domain(self, seqid, iprot, oprot):
    args = rmv_domain_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = rmv_domain_result()
    result.success = self._handler.rmv_domain(args.dname)
    oprot.writeMessageBegin("rmv_domain", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_domain_backet(self, seqid, iprot, oprot):
    args = add_domain_backet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_domain_backet_result()
    result.success = self._handler.add_domain_backet(args.dname, args.bdname, args.longitude, args.latitude, args.isdefault)
    oprot.writeMessageBegin("add_domain_backet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_rmv_domain_backet(self, seqid, iprot, oprot):
    args = rmv_domain_backet_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = rmv_domain_backet_result()
    result.success = self._handler.rmv_domain_backet(args.dname, args.bdname)
    oprot.writeMessageBegin("rmv_domain_backet", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_add_domain_backet_ip(self, seqid, iprot, oprot):
    args = add_domain_backet_ip_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = add_domain_backet_ip_result()
    result.success = self._handler.add_domain_backet_ip(args.dname, args.bdname, args.ip)
    oprot.writeMessageBegin("add_domain_backet_ip", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_rmv_domain_backet_ip(self, seqid, iprot, oprot):
    args = rmv_domain_backet_ip_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = rmv_domain_backet_ip_result()
    result.success = self._handler.rmv_domain_backet_ip(args.dname, args.bdname, args.ip)
    oprot.writeMessageBegin("rmv_domain_backet_ip", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class add_domain_args(object):
  """
  Attributes:
   - dname
   - ttl
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
    (2, TType.I32, 'ttl', None, None, ), # 2
  )

  def __init__(self, dname=None, ttl=None,):
    self.dname = dname
    self.ttl = ttl

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ttl = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    if self.ttl is not None:
      oprot.writeFieldBegin('ttl', TType.I32, 2)
      oprot.writeI32(self.ttl)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_domain_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_args(object):
  """
  Attributes:
   - dname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
  )

  def __init__(self, dname=None,):
    self.dname = dname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_domain_backet_args(object):
  """
  Attributes:
   - dname
   - bdname
   - longitude
   - latitude
   - isdefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
    (2, TType.STRING, 'bdname', None, None, ), # 2
    (3, TType.DOUBLE, 'longitude', None, None, ), # 3
    (4, TType.DOUBLE, 'latitude', None, None, ), # 4
    (5, TType.BOOL, 'isdefault', None, False, ), # 5
  )

  def __init__(self, dname=None, bdname=None, longitude=None, latitude=None, isdefault=thrift_spec[5][4],):
    self.dname = dname
    self.bdname = bdname
    self.longitude = longitude
    self.latitude = latitude
    self.isdefault = isdefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bdname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isdefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_backet_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    if self.bdname is not None:
      oprot.writeFieldBegin('bdname', TType.STRING, 2)
      oprot.writeString(self.bdname)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 3)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 4)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.isdefault is not None:
      oprot.writeFieldBegin('isdefault', TType.BOOL, 5)
      oprot.writeBool(self.isdefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_domain_backet_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_backet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_backet_args(object):
  """
  Attributes:
   - dname
   - bdname
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
    (2, TType.STRING, 'bdname', None, None, ), # 2
  )

  def __init__(self, dname=None, bdname=None,):
    self.dname = dname
    self.bdname = bdname

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bdname = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_backet_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    if self.bdname is not None:
      oprot.writeFieldBegin('bdname', TType.STRING, 2)
      oprot.writeString(self.bdname)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_backet_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_backet_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_domain_backet_ip_args(object):
  """
  Attributes:
   - dname
   - bdname
   - ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
    (2, TType.STRING, 'bdname', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
  )

  def __init__(self, dname=None, bdname=None, ip=None,):
    self.dname = dname
    self.bdname = bdname
    self.ip = ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bdname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_backet_ip_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    if self.bdname is not None:
      oprot.writeFieldBegin('bdname', TType.STRING, 2)
      oprot.writeString(self.bdname)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class add_domain_backet_ip_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('add_domain_backet_ip_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_backet_ip_args(object):
  """
  Attributes:
   - dname
   - bdname
   - ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'dname', None, None, ), # 1
    (2, TType.STRING, 'bdname', None, None, ), # 2
    (3, TType.STRING, 'ip', None, None, ), # 3
  )

  def __init__(self, dname=None, bdname=None, ip=None,):
    self.dname = dname
    self.bdname = bdname
    self.ip = ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.dname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.bdname = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ip = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_backet_ip_args')
    if self.dname is not None:
      oprot.writeFieldBegin('dname', TType.STRING, 1)
      oprot.writeString(self.dname)
      oprot.writeFieldEnd()
    if self.bdname is not None:
      oprot.writeFieldBegin('bdname', TType.STRING, 2)
      oprot.writeString(self.bdname)
      oprot.writeFieldEnd()
    if self.ip is not None:
      oprot.writeFieldBegin('ip', TType.STRING, 3)
      oprot.writeString(self.ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmv_domain_backet_ip_result(object):
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmv_domain_backet_ip_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)


if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [[-t host[:port]] | [-s [path_to_unix_socket]] | [-u url]] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  bool add_domain(string dname, i32 ttl)'
  print '  bool rmv_domain(string dname)'
  print '  bool add_domain_backet(string dname, string bdname, double longitude, double latitude, bool isdefault)'
  print '  bool rmv_domain_backet(string dname, string bdname)'
  print '  bool add_domain_backet_ip(string dname, string bdname, string ip)'
  print '  bool rmv_domain_backet_ip(string dname, string bdname, string ip)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
unix=False;
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-t':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

elif sys.argv[argi] == '-s':
  host=sys.argv[argi+1];
  unix=False;

elif sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  if unix:
    socket = TSocket.TSocket(unix_socket=host)

  else:
    socket = TSocket.TSocket(host, port)

  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)

protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Client(protocol)
transport.open()

if cmd == 'add_domain':
  if len(args) != 2:
    print 'add_domain requires 2 args'
    sys.exit(1)
  pp.pprint(client.add_domain(args[0],eval(args[1]),))

elif cmd == 'rmv_domain':
  if len(args) != 1:
    print 'rmv_domain requires 1 args'
    sys.exit(1)
  pp.pprint(client.rmv_domain(args[0],))

elif cmd == 'add_domain_backet':
  if len(args) != 5:
    print 'add_domain_backet requires 5 args'
    sys.exit(1)
  pp.pprint(client.add_domain_backet(args[0],args[1],eval(args[2]),eval(args[3]),eval(args[4]),))

elif cmd == 'rmv_domain_backet':
  if len(args) != 2:
    print 'rmv_domain_backet requires 2 args'
    sys.exit(1)
  pp.pprint(client.rmv_domain_backet(args[0],args[1],))

elif cmd == 'add_domain_backet_ip':
  if len(args) != 3:
    print 'add_domain_backet_ip requires 3 args'
    sys.exit(1)
  pp.pprint(client.add_domain_backet_ip(args[0],args[1],args[2],))

elif cmd == 'rmv_domain_backet_ip':
  if len(args) != 3:
    print 'rmv_domain_backet_ip requires 3 args'
    sys.exit(1)
  pp.pprint(client.rmv_domain_backet_ip(args[0],args[1],args[2],))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
